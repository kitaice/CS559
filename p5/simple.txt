#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 N;
varying vec3 v;
varying vec3 uPos;

void main()
{
  N = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  v = pos.xyz;
  uPos = position.xyz;
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;

uniform float time;
uniform vec2 resolution;
varying vec3 N;
varying vec3 v;
varying vec3 uPos;

const float Ks         = 1.0;
const float sExp       = 3.0;
const vec3  lightPos   = vec3(3.0,1.0,0.0);
void main()
{
  vec3 l = normalize(lightPos-v);
  vec3 n = normalize(N);
  vec3 e = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)  
  vec3 h = normalize(e+l);
  float ys = uPos.y*2.0 - floor(uPos.y*2.0);
  float xs = uPos.x*5.0 - floor(uPos.x*5.0);

  float xc = smoothstep(.45,.55,xs);
  float yc = smoothstep(.15,.55,ys);

  float dl = max(0.0, dot(n, vec3(1,1,0)));
  vec3 shit = vec3(2.0,1.1,1.0);
  vec3 res = vec3(xc,yc,1.0);
  

  vec3 diffuseColor  = res*dot(l,n);
  vec3 specularColor = Ks*vec3(1.0,1.0,1.0)*pow(max(dot(h,n),0.0),sExp);
  
  
  gl_FragColor = vec4(res+diffuseColor+specularColor, 1.0) * (.3+.7*dl);
} 
#endif